# version de docker compose syntax que estamos usando
version: "3.9"

services:
# nombre del servicio
  app:
# donde lo construimos el docker file en la ruta directorio con el punto, context
    build:
      context: .
# setear el build ed la imagen como development
      args:
        - DEV=true
# los puertos de nuestra maquina puerto 8000 al puerto imagen 8000
    ports:
      - "8000:8000"
# mapeamos directorio app de nuestro sistema del proyecto al directorio app dentro de nuestro container
  # esto hace que los updates de codigo que hacemos en nuestro proyecto local, verlos reflejados en el running container
    # en tiempo real sin hacer rebuild cada vez que hagamos cambios
    volumes:
      - ./app:/app
# este es el comando que es usado para correr el servicio
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
# el host del db es el mismo servicio 'db'
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
# el servicio app depende del servicio db por tanto se va correr despues del servicio db
    depends_on:
      - db
  
# nombre del servicio
  db:
# imagen de docker hub
    image: postgres:13-alpine
# definir la data de la base de datos
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

# definir la data de la base de datos
volumes:
  dev-db-data:
